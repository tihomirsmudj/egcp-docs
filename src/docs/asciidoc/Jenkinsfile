#!groovy
// SNAPSHOT JENKINS PIPELINE
node {

// tag::define_variables[]
    env.SKIP_TLS = true
    def _projectName = "egcp-dcard"
    def svnUrl = 'https://devbuild.mbu.local:9443/svn/java/Microservices/DCS/ms-dcard/trunk'
    def pom = readMavenPom file: 'pom.xml'
    def artifactId = pom.artifactId // read artifact name
    def artifactVersion = pom.version // read artifact version

    def image
// end::define_variables[]

// tag::stage_checkout[]
    stage('\u2622 CHECKOUT') {
        checkout scm
    }
// end::stage_checkout[]

// tag::stage_deploy[]
    stage("\u2622 DEPLOY ARTIFACTS") {
        configFileProvider([configFile(fileId: '4d3f9e68-7bf2-40e9-8d7e-3363b0410760', variable: 'MAVEN_SETTINGS')]) {
            withMaven(maven: 'M3', globalMavenSettingsConfig: '4d3f9e68-7bf2-40e9-8d7e-3363b0410760', mavenLocalRepo: '.repository') {
                // Run the maven build
                sh 'mvn clean package -DskipTests=true  -DskipDocker -U'

            }  
        }
    }
// end::stage_deploy[]

// tag::stage_prepare_dockerfile[]
          stage("\u2622 PREPARE DOCKER FILE"){
         try{
            writeFile file: 'Dockerfile', text: '''
FROM java:8
VOLUME /tmp
ADD /target/*.jar app.jar
RUN bash -c 'touch /app.jar'
ENV JAVA_OPTS="-Dserver.port=8080"
EXPOSE 8080
ENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -XX:MaxMetaspaceSize=300m -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]'''
         }catch(e){
             throw e
         }
      }
// end::stage_prepare_dockerfile[]

// tag::stage_dockerpush[]
    docker.withRegistry('https://registry.mbu.local', 'docker') {
        stage("\u2622 CREATE DOCKER IMAGE") {
            try{
                docker.withRegistry('https://registry.mbu.local', 'docker') {
                    image = docker.build(_projectName)
            }
            } catch(e) {
                throw e
            }
        }

        stage("\u2622 PUSH DOCKER IMAGE") {
            try {
                image.tag('latest')
                image.push("latest")
            } catch(e) {
                throw e
            }
        }
    }
// end::stage_dockerpush[]

// tag::stage_clean_docker_repo[]
    stage("\u2622 CLEAN LOCAL DOCKER REPO") {
        try {
            sh 'docker rmi $(docker images -q -f dangling=true)'
        } catch(e) {
            println e.message
        }
    }
// end::stage_clean_docker_repo[]
}